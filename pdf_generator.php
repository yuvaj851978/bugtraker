<?php
require_once 'config.php';
requireRole('tester');

if (!isset($_GET['bugs'])) {
    header('Location: generate_report.php');
    exit();
}

$bugIds = explode(',', $_GET['bugs']);
$bugs = [];
$stats = [
    'pending' => 0,
    'in_progress' => 0,
    'fixed' => 0,
    'approved' => 0,
    'rejected' => 0
];

// Get bugs data
try {
    if (!empty($bugIds)) {
        $placeholders = str_repeat('?,', count($bugIds) - 1) . '?';
        $params = array_merge($bugIds, [$_SESSION['user_id']]);
        
        $stmt = $pdo->prepare("
            SELECT bt.*, u.name as developer_name
            FROM bug_tickets bt 
            LEFT JOIN users u ON bt.assigned_dev_id = u.id 
            WHERE bt.id IN ($placeholders) AND bt.created_by = ?
            ORDER BY bt.created_at DESC
        ");
        $stmt->execute($params);
        $bugs = $stmt->fetchAll();
        
        // Calculate stats
        foreach ($bugs as $bug) {
            $stats[$bug['status']]++;
        }
    }
} catch (PDOException $e) {
    header('HTTP/1.1 500 Internal Server Error');
    echo 'Failed to generate CSV report';
    exit();
}

// Set headers for CSV download
header('Content-Type: text/csv; charset=utf-8');
header('Content-Disposition: attachment; filename="bug_report_' . date('Y-m-d') . '.csv"');
header('Cache-Control: no-cache, no-store, must-revalidate');
header('Pragma: no-cache');
header('Expires: 0');

// Generate CSV content
$output = fopen('php://output', 'w');

// Write summary section
fputcsv($output, ['BUG TRACKING REPORT']);
fputcsv($output, ['Generated by', $_SESSION['user_name']]);
fputcsv($output, ['Date', date('F d, Y')]);
fputcsv($output, []); // Empty row
fputcsv($output, ['SUMMARY']);
fputcsv($output, ['Total Bugs', count($bugs)]);
fputcsv($output, ['Approved', $stats['approved']]);
fputcsv($output, ['In Progress', $stats['pending'] + $stats['in_progress']]);
fputcsv($output, ['Rejected', $stats['rejected']]);
fputcsv($output, []); // Empty row

// Write bug details header
fputcsv($output, ['BUG DETAILS']);
fputcsv($output, ['ID', 'Title', 'Priority', 'Status', 'Developer', 'Created', 'Description']);

// Write bug details
foreach ($bugs as $bug) {
    fputcsv($output, [
        '#' . $bug['id'],
        $bug['title'],
        $bug['priority'],
        ucfirst(str_replace('_', ' ', $bug['status'])),
        $bug['developer_name'] ?: 'Unassigned',
        date('M d, Y', strtotime($bug['created_at'])),
        substr($bug['description'], 0, 200) . (strlen($bug['description']) > 200 ? '...' : '')
    ]);
}

fclose($output);
exit();
?>